/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c FileManagerInterface -p filemanager_interface filemanagerinterface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FILEMANAGER_INTERFACE_H_1438760282
#define FILEMANAGER_INTERFACE_H_1438760282

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.Backend.FileInfo
 */
class FileManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.Backend.FileInfo"; }

public:
    FileManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~FileManagerInterface();

    Q_PROPERTY(uint DriveStartStopTypeMultidisk READ driveStartStopTypeMultidisk)
    inline uint driveStartStopTypeMultidisk() const
    { return qvariant_cast< uint >(property("DriveStartStopTypeMultidisk")); }

    Q_PROPERTY(uint DriveStartStopTypeNetwork READ driveStartStopTypeNetwork)
    inline uint driveStartStopTypeNetwork() const
    { return qvariant_cast< uint >(property("DriveStartStopTypeNetwork")); }

    Q_PROPERTY(uint DriveStartStopTypePassword READ driveStartStopTypePassword)
    inline uint driveStartStopTypePassword() const
    { return qvariant_cast< uint >(property("DriveStartStopTypePassword")); }

    Q_PROPERTY(uint DriveStartStopTypeShutdown READ driveStartStopTypeShutdown)
    inline uint driveStartStopTypeShutdown() const
    { return qvariant_cast< uint >(property("DriveStartStopTypeShutdown")); }

    Q_PROPERTY(uint DriveStartStopTypeUnknown READ driveStartStopTypeUnknown)
    inline uint driveStartStopTypeUnknown() const
    { return qvariant_cast< uint >(property("DriveStartStopTypeUnknown")); }

    Q_PROPERTY(QString FileAttributeAccessCanDelete READ fileAttributeAccessCanDelete)
    inline QString fileAttributeAccessCanDelete() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanDelete")); }

    Q_PROPERTY(QString FileAttributeAccessCanExecute READ fileAttributeAccessCanExecute)
    inline QString fileAttributeAccessCanExecute() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanExecute")); }

    Q_PROPERTY(QString FileAttributeAccessCanRead READ fileAttributeAccessCanRead)
    inline QString fileAttributeAccessCanRead() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanRead")); }

    Q_PROPERTY(QString FileAttributeAccessCanRename READ fileAttributeAccessCanRename)
    inline QString fileAttributeAccessCanRename() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanRename")); }

    Q_PROPERTY(QString FileAttributeAccessCanTrash READ fileAttributeAccessCanTrash)
    inline QString fileAttributeAccessCanTrash() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanTrash")); }

    Q_PROPERTY(QString FileAttributeAccessCanWrite READ fileAttributeAccessCanWrite)
    inline QString fileAttributeAccessCanWrite() const
    { return qvariant_cast< QString >(property("FileAttributeAccessCanWrite")); }

    Q_PROPERTY(QString FileAttributeDosIsArchive READ fileAttributeDosIsArchive)
    inline QString fileAttributeDosIsArchive() const
    { return qvariant_cast< QString >(property("FileAttributeDosIsArchive")); }

    Q_PROPERTY(QString FileAttributeDosIsSystem READ fileAttributeDosIsSystem)
    inline QString fileAttributeDosIsSystem() const
    { return qvariant_cast< QString >(property("FileAttributeDosIsSystem")); }

    Q_PROPERTY(QString FileAttributeEtagValue READ fileAttributeEtagValue)
    inline QString fileAttributeEtagValue() const
    { return qvariant_cast< QString >(property("FileAttributeEtagValue")); }

    Q_PROPERTY(QString FileAttributeFilesystemFree READ fileAttributeFilesystemFree)
    inline QString fileAttributeFilesystemFree() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemFree")); }

    Q_PROPERTY(QString FileAttributeFilesystemReadonly READ fileAttributeFilesystemReadonly)
    inline QString fileAttributeFilesystemReadonly() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemReadonly")); }

    Q_PROPERTY(QString FileAttributeFilesystemSize READ fileAttributeFilesystemSize)
    inline QString fileAttributeFilesystemSize() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemSize")); }

    Q_PROPERTY(QString FileAttributeFilesystemType READ fileAttributeFilesystemType)
    inline QString fileAttributeFilesystemType() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemType")); }

    Q_PROPERTY(QString FileAttributeFilesystemUsePreview READ fileAttributeFilesystemUsePreview)
    inline QString fileAttributeFilesystemUsePreview() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemUsePreview")); }

    Q_PROPERTY(QString FileAttributeFilesystemUsed READ fileAttributeFilesystemUsed)
    inline QString fileAttributeFilesystemUsed() const
    { return qvariant_cast< QString >(property("FileAttributeFilesystemUsed")); }

    Q_PROPERTY(QString FileAttributeGvfsBackend READ fileAttributeGvfsBackend)
    inline QString fileAttributeGvfsBackend() const
    { return qvariant_cast< QString >(property("FileAttributeGvfsBackend")); }

    Q_PROPERTY(QString FileAttributeIdFile READ fileAttributeIdFile)
    inline QString fileAttributeIdFile() const
    { return qvariant_cast< QString >(property("FileAttributeIdFile")); }

    Q_PROPERTY(QString FileAttributeIdFilesystem READ fileAttributeIdFilesystem)
    inline QString fileAttributeIdFilesystem() const
    { return qvariant_cast< QString >(property("FileAttributeIdFilesystem")); }

    Q_PROPERTY(QString FileAttributeMountableCanEject READ fileAttributeMountableCanEject)
    inline QString fileAttributeMountableCanEject() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanEject")); }

    Q_PROPERTY(QString FileAttributeMountableCanMount READ fileAttributeMountableCanMount)
    inline QString fileAttributeMountableCanMount() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanMount")); }

    Q_PROPERTY(QString FileAttributeMountableCanPoll READ fileAttributeMountableCanPoll)
    inline QString fileAttributeMountableCanPoll() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanPoll")); }

    Q_PROPERTY(QString FileAttributeMountableCanStart READ fileAttributeMountableCanStart)
    inline QString fileAttributeMountableCanStart() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanStart")); }

    Q_PROPERTY(QString FileAttributeMountableCanStartDegraded READ fileAttributeMountableCanStartDegraded)
    inline QString fileAttributeMountableCanStartDegraded() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanStartDegraded")); }

    Q_PROPERTY(QString FileAttributeMountableCanStop READ fileAttributeMountableCanStop)
    inline QString fileAttributeMountableCanStop() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanStop")); }

    Q_PROPERTY(QString FileAttributeMountableCanUnmount READ fileAttributeMountableCanUnmount)
    inline QString fileAttributeMountableCanUnmount() const
    { return qvariant_cast< QString >(property("FileAttributeMountableCanUnmount")); }

    Q_PROPERTY(QString FileAttributeMountableHalUdi READ fileAttributeMountableHalUdi)
    inline QString fileAttributeMountableHalUdi() const
    { return qvariant_cast< QString >(property("FileAttributeMountableHalUdi")); }

    Q_PROPERTY(QString FileAttributeMountableIsMediaCheckAutomatic READ fileAttributeMountableIsMediaCheckAutomatic)
    inline QString fileAttributeMountableIsMediaCheckAutomatic() const
    { return qvariant_cast< QString >(property("FileAttributeMountableIsMediaCheckAutomatic")); }

    Q_PROPERTY(QString FileAttributeMountableStartStopType READ fileAttributeMountableStartStopType)
    inline QString fileAttributeMountableStartStopType() const
    { return qvariant_cast< QString >(property("FileAttributeMountableStartStopType")); }

    Q_PROPERTY(QString FileAttributeMountableUnixDevice READ fileAttributeMountableUnixDevice)
    inline QString fileAttributeMountableUnixDevice() const
    { return qvariant_cast< QString >(property("FileAttributeMountableUnixDevice")); }

    Q_PROPERTY(QString FileAttributeMountableUnixDeviceFile READ fileAttributeMountableUnixDeviceFile)
    inline QString fileAttributeMountableUnixDeviceFile() const
    { return qvariant_cast< QString >(property("FileAttributeMountableUnixDeviceFile")); }

    Q_PROPERTY(QString FileAttributeOwnerGroup READ fileAttributeOwnerGroup)
    inline QString fileAttributeOwnerGroup() const
    { return qvariant_cast< QString >(property("FileAttributeOwnerGroup")); }

    Q_PROPERTY(QString FileAttributeOwnerUser READ fileAttributeOwnerUser)
    inline QString fileAttributeOwnerUser() const
    { return qvariant_cast< QString >(property("FileAttributeOwnerUser")); }

    Q_PROPERTY(QString FileAttributeOwnerUserReal READ fileAttributeOwnerUserReal)
    inline QString fileAttributeOwnerUserReal() const
    { return qvariant_cast< QString >(property("FileAttributeOwnerUserReal")); }

    Q_PROPERTY(QString FileAttributeSelinuxContext READ fileAttributeSelinuxContext)
    inline QString fileAttributeSelinuxContext() const
    { return qvariant_cast< QString >(property("FileAttributeSelinuxContext")); }

    Q_PROPERTY(QString FileAttributeStandardAllocatedSize READ fileAttributeStandardAllocatedSize)
    inline QString fileAttributeStandardAllocatedSize() const
    { return qvariant_cast< QString >(property("FileAttributeStandardAllocatedSize")); }

    Q_PROPERTY(QString FileAttributeStandardContentType READ fileAttributeStandardContentType)
    inline QString fileAttributeStandardContentType() const
    { return qvariant_cast< QString >(property("FileAttributeStandardContentType")); }

    Q_PROPERTY(QString FileAttributeStandardCopyName READ fileAttributeStandardCopyName)
    inline QString fileAttributeStandardCopyName() const
    { return qvariant_cast< QString >(property("FileAttributeStandardCopyName")); }

    Q_PROPERTY(QString FileAttributeStandardDescription READ fileAttributeStandardDescription)
    inline QString fileAttributeStandardDescription() const
    { return qvariant_cast< QString >(property("FileAttributeStandardDescription")); }

    Q_PROPERTY(QString FileAttributeStandardDisplayName READ fileAttributeStandardDisplayName)
    inline QString fileAttributeStandardDisplayName() const
    { return qvariant_cast< QString >(property("FileAttributeStandardDisplayName")); }

    Q_PROPERTY(QString FileAttributeStandardEditName READ fileAttributeStandardEditName)
    inline QString fileAttributeStandardEditName() const
    { return qvariant_cast< QString >(property("FileAttributeStandardEditName")); }

    Q_PROPERTY(QString FileAttributeStandardFastContentType READ fileAttributeStandardFastContentType)
    inline QString fileAttributeStandardFastContentType() const
    { return qvariant_cast< QString >(property("FileAttributeStandardFastContentType")); }

    Q_PROPERTY(QString FileAttributeStandardIsBackup READ fileAttributeStandardIsBackup)
    inline QString fileAttributeStandardIsBackup() const
    { return qvariant_cast< QString >(property("FileAttributeStandardIsBackup")); }

    Q_PROPERTY(QString FileAttributeStandardIsHidden READ fileAttributeStandardIsHidden)
    inline QString fileAttributeStandardIsHidden() const
    { return qvariant_cast< QString >(property("FileAttributeStandardIsHidden")); }

    Q_PROPERTY(QString FileAttributeStandardIsSymlink READ fileAttributeStandardIsSymlink)
    inline QString fileAttributeStandardIsSymlink() const
    { return qvariant_cast< QString >(property("FileAttributeStandardIsSymlink")); }

    Q_PROPERTY(QString FileAttributeStandardIsVirtual READ fileAttributeStandardIsVirtual)
    inline QString fileAttributeStandardIsVirtual() const
    { return qvariant_cast< QString >(property("FileAttributeStandardIsVirtual")); }

    Q_PROPERTY(QString FileAttributeStandardName READ fileAttributeStandardName)
    inline QString fileAttributeStandardName() const
    { return qvariant_cast< QString >(property("FileAttributeStandardName")); }

    Q_PROPERTY(QString FileAttributeStandardSize READ fileAttributeStandardSize)
    inline QString fileAttributeStandardSize() const
    { return qvariant_cast< QString >(property("FileAttributeStandardSize")); }

    Q_PROPERTY(QString FileAttributeStandardSortOrder READ fileAttributeStandardSortOrder)
    inline QString fileAttributeStandardSortOrder() const
    { return qvariant_cast< QString >(property("FileAttributeStandardSortOrder")); }

    Q_PROPERTY(QString FileAttributeStandardSymlinkTarget READ fileAttributeStandardSymlinkTarget)
    inline QString fileAttributeStandardSymlinkTarget() const
    { return qvariant_cast< QString >(property("FileAttributeStandardSymlinkTarget")); }

    Q_PROPERTY(QString FileAttributeStandardTargetUri READ fileAttributeStandardTargetUri)
    inline QString fileAttributeStandardTargetUri() const
    { return qvariant_cast< QString >(property("FileAttributeStandardTargetUri")); }

    Q_PROPERTY(QString FileAttributeStandardType READ fileAttributeStandardType)
    inline QString fileAttributeStandardType() const
    { return qvariant_cast< QString >(property("FileAttributeStandardType")); }

    Q_PROPERTY(QString FileAttributeThumbnailIsValid READ fileAttributeThumbnailIsValid)
    inline QString fileAttributeThumbnailIsValid() const
    { return qvariant_cast< QString >(property("FileAttributeThumbnailIsValid")); }

    Q_PROPERTY(QString FileAttributeThumbnailPath READ fileAttributeThumbnailPath)
    inline QString fileAttributeThumbnailPath() const
    { return qvariant_cast< QString >(property("FileAttributeThumbnailPath")); }

    Q_PROPERTY(QString FileAttributeThumbnailingFailed READ fileAttributeThumbnailingFailed)
    inline QString fileAttributeThumbnailingFailed() const
    { return qvariant_cast< QString >(property("FileAttributeThumbnailingFailed")); }

    Q_PROPERTY(QString FileAttributeTimeAccess READ fileAttributeTimeAccess)
    inline QString fileAttributeTimeAccess() const
    { return qvariant_cast< QString >(property("FileAttributeTimeAccess")); }

    Q_PROPERTY(QString FileAttributeTimeAccessUsec READ fileAttributeTimeAccessUsec)
    inline QString fileAttributeTimeAccessUsec() const
    { return qvariant_cast< QString >(property("FileAttributeTimeAccessUsec")); }

    Q_PROPERTY(QString FileAttributeTimeChanged READ fileAttributeTimeChanged)
    inline QString fileAttributeTimeChanged() const
    { return qvariant_cast< QString >(property("FileAttributeTimeChanged")); }

    Q_PROPERTY(QString FileAttributeTimeChangedUsec READ fileAttributeTimeChangedUsec)
    inline QString fileAttributeTimeChangedUsec() const
    { return qvariant_cast< QString >(property("FileAttributeTimeChangedUsec")); }

    Q_PROPERTY(QString FileAttributeTimeCreated READ fileAttributeTimeCreated)
    inline QString fileAttributeTimeCreated() const
    { return qvariant_cast< QString >(property("FileAttributeTimeCreated")); }

    Q_PROPERTY(QString FileAttributeTimeCreatedUsec READ fileAttributeTimeCreatedUsec)
    inline QString fileAttributeTimeCreatedUsec() const
    { return qvariant_cast< QString >(property("FileAttributeTimeCreatedUsec")); }

    Q_PROPERTY(QString FileAttributeTimeModified READ fileAttributeTimeModified)
    inline QString fileAttributeTimeModified() const
    { return qvariant_cast< QString >(property("FileAttributeTimeModified")); }

    Q_PROPERTY(QString FileAttributeTimeModifiedUsec READ fileAttributeTimeModifiedUsec)
    inline QString fileAttributeTimeModifiedUsec() const
    { return qvariant_cast< QString >(property("FileAttributeTimeModifiedUsec")); }

    Q_PROPERTY(QString FileAttributeTrashDeletionDate READ fileAttributeTrashDeletionDate)
    inline QString fileAttributeTrashDeletionDate() const
    { return qvariant_cast< QString >(property("FileAttributeTrashDeletionDate")); }

    Q_PROPERTY(QString FileAttributeTrashItemCount READ fileAttributeTrashItemCount)
    inline QString fileAttributeTrashItemCount() const
    { return qvariant_cast< QString >(property("FileAttributeTrashItemCount")); }

    Q_PROPERTY(QString FileAttributeTrashOrigPath READ fileAttributeTrashOrigPath)
    inline QString fileAttributeTrashOrigPath() const
    { return qvariant_cast< QString >(property("FileAttributeTrashOrigPath")); }

    Q_PROPERTY(QString FileAttributeUnixBlockSize READ fileAttributeUnixBlockSize)
    inline QString fileAttributeUnixBlockSize() const
    { return qvariant_cast< QString >(property("FileAttributeUnixBlockSize")); }

    Q_PROPERTY(QString FileAttributeUnixBlocks READ fileAttributeUnixBlocks)
    inline QString fileAttributeUnixBlocks() const
    { return qvariant_cast< QString >(property("FileAttributeUnixBlocks")); }

    Q_PROPERTY(QString FileAttributeUnixDevice READ fileAttributeUnixDevice)
    inline QString fileAttributeUnixDevice() const
    { return qvariant_cast< QString >(property("FileAttributeUnixDevice")); }

    Q_PROPERTY(QString FileAttributeUnixGid READ fileAttributeUnixGid)
    inline QString fileAttributeUnixGid() const
    { return qvariant_cast< QString >(property("FileAttributeUnixGid")); }

    Q_PROPERTY(QString FileAttributeUnixInode READ fileAttributeUnixInode)
    inline QString fileAttributeUnixInode() const
    { return qvariant_cast< QString >(property("FileAttributeUnixInode")); }

    Q_PROPERTY(QString FileAttributeUnixIsMountpoint READ fileAttributeUnixIsMountpoint)
    inline QString fileAttributeUnixIsMountpoint() const
    { return qvariant_cast< QString >(property("FileAttributeUnixIsMountpoint")); }

    Q_PROPERTY(QString FileAttributeUnixMode READ fileAttributeUnixMode)
    inline QString fileAttributeUnixMode() const
    { return qvariant_cast< QString >(property("FileAttributeUnixMode")); }

    Q_PROPERTY(QString FileAttributeUnixNlink READ fileAttributeUnixNlink)
    inline QString fileAttributeUnixNlink() const
    { return qvariant_cast< QString >(property("FileAttributeUnixNlink")); }

    Q_PROPERTY(QString FileAttributeUnixRdev READ fileAttributeUnixRdev)
    inline QString fileAttributeUnixRdev() const
    { return qvariant_cast< QString >(property("FileAttributeUnixRdev")); }

    Q_PROPERTY(QString FileAttributeUnixUid READ fileAttributeUnixUid)
    inline QString fileAttributeUnixUid() const
    { return qvariant_cast< QString >(property("FileAttributeUnixUid")); }

    Q_PROPERTY(uint FileTypeDirectory READ fileTypeDirectory)
    inline uint fileTypeDirectory() const
    { return qvariant_cast< uint >(property("FileTypeDirectory")); }

    Q_PROPERTY(uint FileTypeMountable READ fileTypeMountable)
    inline uint fileTypeMountable() const
    { return qvariant_cast< uint >(property("FileTypeMountable")); }

    Q_PROPERTY(uint FileTypeRegular READ fileTypeRegular)
    inline uint fileTypeRegular() const
    { return qvariant_cast< uint >(property("FileTypeRegular")); }

    Q_PROPERTY(uint FileTypeShortcut READ fileTypeShortcut)
    inline uint fileTypeShortcut() const
    { return qvariant_cast< uint >(property("FileTypeShortcut")); }

    Q_PROPERTY(uint FileTypeSpecial READ fileTypeSpecial)
    inline uint fileTypeSpecial() const
    { return qvariant_cast< uint >(property("FileTypeSpecial")); }

    Q_PROPERTY(uint FileTypeSymbolicLink READ fileTypeSymbolicLink)
    inline uint fileTypeSymbolicLink() const
    { return qvariant_cast< uint >(property("FileTypeSymbolicLink")); }

    Q_PROPERTY(uint FileTypeUnknown READ fileTypeUnknown)
    inline uint fileTypeUnknown() const
    { return qvariant_cast< uint >(property("FileTypeUnknown")); }

    Q_PROPERTY(uint FilesystemPreviewTypeIfAlways READ filesystemPreviewTypeIfAlways)
    inline uint filesystemPreviewTypeIfAlways() const
    { return qvariant_cast< uint >(property("FilesystemPreviewTypeIfAlways")); }

    Q_PROPERTY(uint FilesystemPreviewTypeIfLocal READ filesystemPreviewTypeIfLocal)
    inline uint filesystemPreviewTypeIfLocal() const
    { return qvariant_cast< uint >(property("FilesystemPreviewTypeIfLocal")); }

    Q_PROPERTY(uint FilesystemPreviewTypeNever READ filesystemPreviewTypeNever)
    inline uint filesystemPreviewTypeNever() const
    { return qvariant_cast< uint >(property("FilesystemPreviewTypeNever")); }

    Q_PROPERTY(uint QueryFlagNofollowSymlinks READ queryFlagNofollowSymlinks)
    inline uint queryFlagNofollowSymlinks() const
    { return qvariant_cast< uint >(property("QueryFlagNofollowSymlinks")); }

    Q_PROPERTY(uint QueryFlagNone READ queryFlagNone)
    inline uint queryFlagNone() const
    { return qvariant_cast< uint >(property("QueryFlagNone")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetThemeIcon(const QString &in0, int in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("GetThemeIcon"), argumentList);
    }

    inline QDBusPendingReply<QString> GetThumbnail(const QString &in0, int in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("GetThumbnail"), argumentList);
    }

    inline QDBusPendingReply<bool> IsNativeFile(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsNativeFile"), argumentList);
    }

    inline QDBusPendingReply<QString> QueryInfo(const QString &in0, const QString &in1, uint in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("QueryInfo"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace Backend {
        typedef ::FileManagerInterface FileInfo;
      }
    }
  }
}
#endif
