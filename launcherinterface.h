/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c LauncherInterface -p launcherinterface ddelauncher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LAUNCHERINTERFACE_H_1438658018
#define LAUNCHERINTERFACE_H_1438658018

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "dbusargument.h"

/*
 * Proxy class for interface com.deepin.dde.daemon.Launcher
 */
class LauncherInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.dde.daemon.Launcher"; }

public:
    LauncherInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~LauncherInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<CatalogInfoList> GetAllCategoryInfos()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllCategoryInfos"), argumentList);
    }

    inline QDBusPendingReply<AppFrequencyList> GetAllFrequency()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllFrequency"), argumentList);
    }

    inline QDBusPendingReply<AppInfoList> GetAllItemInfos()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllItemInfos"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetAllNewInstalledApps()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllNewInstalledApps"), argumentList);
    }

    inline QDBusPendingReply<AppTimeInstalledList> GetAllTimeInstalled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllTimeInstalled"), argumentList);
    }

    inline QDBusPendingReply<CatalogInfo> GetCategoryInfo(qlonglong in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetCategoryInfo"), argumentList);
    }

    inline QDBusPendingReply<AppInfo> GetItemInfo(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetItemInfo"), argumentList);
    }

    inline QDBusPendingReply<bool> IsItemOnDesktop(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsItemOnDesktop"), argumentList);
    }

    inline QDBusPendingReply<> MarkLaunched(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("MarkLaunched"), argumentList);
    }

    inline QDBusPendingReply<> RecordFrequency(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("RecordFrequency"), argumentList);
    }

    inline QDBusPendingReply<> RecordRate(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("RecordRate"), argumentList);
    }

    inline QDBusPendingReply<bool> RequestRemoveFromDesktop(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("RequestRemoveFromDesktop"), argumentList);
    }

    inline QDBusPendingReply<bool> RequestSendToDesktop(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("RequestSendToDesktop"), argumentList);
    }

    inline QDBusPendingReply<> RequestUninstall(const QString &in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("RequestUninstall"), argumentList);
    }

    inline QDBusPendingReply<> Search(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Search"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemChanged(const QString &in0, AppInfo in1, qlonglong in2);
    void NewAppLaunched(const QString &in0);
    void NewAppMarkedAsLaunched(const QString &in0);
    void RemoveFromDesktopFailed(const QString &in0, const QString &in1);
    void RemoveFromDesktopSuccess(const QString &in0);
    void SearchDone(const QStringList &in0);
    void SendToDesktopFailed(const QString &in0, const QString &in1);
    void SendToDesktopSuccess(const QString &in0);
    void UninstallFailed(const QString &in0, const QString &in1);
    void UninstallSuccess(const QString &in0);
};

namespace com {
  namespace deepin {
    namespace dde {
      namespace daemon {
        typedef ::LauncherInterface Launcher;
      }
    }
  }
}
#endif
